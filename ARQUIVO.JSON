import express from "express";
const PORT = 3000;
import consign from "consign";

const app = express();

app.get("/", (req, res) => res.json({status: "NTask API"}));

app.listen(PORT, () => console.log(`NTask API - porta ${PORT}`));
consign()
    .include("libs/config.js")
    .then("db.js")
    .then("libs/middlewares.js")
    .then("routes")
    .then("libs/boot.js")
    .into(app);
	
	
	
	
	
+import fs from "fs";
import path from "path";
import Sequelize from "sequelize";

let db = null;

module.exports = () => {
    if (!db) {
        const config = require("./libs/config.js");
        const sequelize = new Sequelize(
            config.database,
            config.username,
            config.password,
            config.params
        );
        db = {
           sequelize,
           Sequelize,
           models: {}
        };
        const dir = path.join(__dirname, "models");
        fs.readdirSync(dir).forEach(file => {
          const modelDir = path.join(dir, file);
          const model = sequelize.import(modelDir);
          db.models[model.name] = model;
        });
        Object.keys(db.models).forEach(key => {
            db.models[key].associate(db.models);
        });
    }
    return db;
};



module.exports = app => {
    app.db.sequelize.sync().done(() => {
        app.listen(app.get("port"), () => {
            console.log(`NTask API - porta ${app.get("port")}`);
        });
    });
}


@ -0,0 +1,12 @@
module.exports = {
    database: "ntask",
    username: "",
    password: "",
    params: {
        dialect: "sqlite",
        storage: "ntask.sqlite",
        define: {
            underscore: true
        }
    }
};


@ -0,0 +1,11 @@
import bodyParser from "body-parser";

module.exports = app => {
  app.set("port", 3000);
  app.set("json spaces", 4);
  app.use(bodyParser.json);
  app.use((req,res) => {
    delete req.body.id;
    next();
  });
};


+module.exports = (sequelize, DataType) => {
    const Tasks = sequelize.define("Tasks", {
        id: {
            type: DataType.INTEGER,
            primaryKey: true,
            autoIncrement: true
        },
        title: {
            type: DataType.STRING,
            allowNull: false,
            validate: { notEmpty: true }
        },
        done: {
            type: DataType.BOOLEAN,
            allowNull: false,
            defaultValue: false
        }
    }, {
        classMethods: {
            associate: (models) => {
                Tasks.belongsTo(models.Users);
            }
        }
    });
    return Tasks;
};


+module.exports = (sequelize, DataType) => {
    const Users = sequelize.define("Users", {
        id: {
            type: DataType.INTEGER,
            primaryKey: true,
            autoIncrement: true
        },
        name: {
            type: DataType.STRING,
            allowNull: false,
            validate: { notEmpty: true }
        },
        password: {
            type: DataType.STRING,
            allowNull: false,
            validate: { notEmpty: true }
        },
        email: {
            type: DataType.STRING,
            unique: true,
            allowNull: false,
            validate: { notEmpty: true }
        },
        
    }, {
        classMethods: {
            associate: (models) => {
                Users.hasMany(models.Tasks);
            }
        }
    });
    return Users;
};



@ -10,7 +10,11 @@
  "dependencies": {
    "babel-cli": "^6.5.1",
    "babel-preset-es2015": "^6.5.0",
    "express": "^4.17.1"
    "body-parser": "^1.19.0",
    "consign": "^0.1.2",
    "express": "^4.17.1",
    "sequelize": "^3.35.1",
    "sqlite3": "^4.1.0"
  },
  "devDependencies": {
    "nodemon": "^1.19.4"
	
	
	
	@ -0,0 +1,3 @@
module.exports = app => {
    app.get("/", (req, res) => res.json({status: "NTask API"}));
};


+module.exports = app => {
  const Tasks = app.db.models.Tasks;

    app.route("/tasks")
      .get((req, res) => {
        Tasks.findAll({})
          .then(result => res.json(result))
          .catch(error => {
            res.status(412).json({msg: error.message});
          });
        })
        // "/tasks": Lista tarefas 
      .post((req, res) => {
        Tasks.create(req.body)
          .then(result => res.json(result))
          .catch(error => {
            res.status(412).json({msg: error.message});
          });
      });
      // "/tasks": Cadastra uma nova tarefa

    app.route("/tasks/:id")
      .get((req, res) => {
        Tasks.findOne({where: req.params})
          .then(result => {
            if(result) {
              res.json(result);
            } else {
              res.sendStatus(404);
            }
          })
          .catch(error => {
            res.status(412).json({msg: error.message});
          });
      })
      // "/tasks/1": Consulta uma tarefa
      .put((req, res) => {
        Tasks.update(req.body, {where: req.params})
          .then(result => res.sendStatus(204))
          .catch(error => {
            res.status(412).json({msg: error.message});
          });
      })
      // "/tasks/1": Atualiza uma tarefa
      .delete((req, res) => {
        Tasks.destroy({where: req.params})
          .then(result => res.sendStatus(204))
          .catch(error => {
            res.status(412).json({msg: error.message});
          });
      });
      // "/tasks/1": Exclui uma tarefa
};

module.exports = app => {
    const Users = app.db.models.Users;

    app.get("/users/:id", (req, res) => {
        Users.findById(req.params.id, {
            attributes: ["id", "name", "email"]
        })
          .then(result => res.json(result))
          .catch(error => {
            res.status(412).json({msg: error.message});
         });
    });
    app.delete("/users/:id", (req, res) => {
        Users.destroy({where: {id: req.params.id} })
          .then(result => res.sendStatus(204))
          .catch(error => {
            res.status(412).json({msg: error.message});
         });
    });
    app.post("/users", (req, res) => {
        Users.create(req.body)
          .then(result => res.json(result))
          .catch(error => {
            res.status(412).json({msg: error.message});
      });
  });
};